/***********************INTRODUCCION A LA TERMINAL Y LINEA DE COMANDOS***************/
/*Git Bash*/

* Git  bash usa comandos de terminal de linux
* terminal de Git  bash muestra la ruta como en linux






* En windows en la terminal no se diferencia gminusculas y mayuscula
* si tienes visual code en tu sistema, el la linea de comandos si agregas code , abre automaticamente visual code






/**comandos de consola**/


--- pwd          = Ubicacion en que carpeta se encuentra actualmente la terminal
--- ls           = lista de archivos en la carpeta que se encuentran en ese momento.
--- mkdir        = Permite crear carpeta Ej: mkdir  nombreCarpeta
--- rm           = elimna el archivo indicado o completo todo el disco duro Ej: rm nombreArchivo.txt
--- touch        = Permite crear archivos vacios Ej: touch nombreArchivo.txt
--- cat          = muesta el contenido del archivo Ej: cat nombreArchivo.txt
--- history      = Muestra el historial de comandos realizados.
    !numeroHisry = muestra lo que se ejecuto en ese comando
--- cd           = Para navegar entre carpetas Ejemplo : cd / .
--- ls -al       = Muestra un listado de documento mostrando el total de archivos, incluyendo los ocultos.
--- ls -l        = Muestra un listado de documento mostrando el total de archivos, no los archivos ocultos.
--- ls -a        = Muestras los archivos pero no en lista
--- clear        = Limpia la consola.
--- tecla Tap    = realiza el atutollenado
--- vim          = Permite crear archivo hymt en consola EJ : vim index.htm (Permite meter informacion)
--- code         = abre visual code Ej : code archivo.txt
--- eval $(ssh-agent -s) = se verifica que se encuentre corriendo ssh , indicando en el procedor 
--- ssh-keygen -t rsa -b 4096 -C "correo_asociado@gitYgithub.com" = se crea llave ssh en el pc
--- ssh-add ~/.ssh/id_rsa = se agrega asocia llave a git 




/**comandos de git**/

--- git init                           : Inicia el repositorio en la carpeta ubicada
-*- git add                            : permite agregar archivos al repositorio ej: git add .archivoVacio.txt
-*- git add .                          : permite agregar archivos todos los archivos del repositorio
--- commit -m ""                       : permite enviar el archivo al repositorio donde estan todos los cambios realizados al repositorio real.
-*- commit -am ""                      : permite enviar el archivo al repositorio donde estan todos los cambios realizados al repositorio real con comentatio,
                                         Tambien se ahorra el git add .  con los archivos ya iniciados // los archivos nuevos se le debe hacer git add .
--- checkout                           : Trae todos los cambios desde el repositorio trae los cambios de la rama indicada :
--- git branch                         : Permite crear una nueva rama en la cual se puede trabajar una nueva version EJ: git branch cabecera  // git branch : pos si solo muertra todos los branch
-*- git branch -m nombreBranchCambiar  : Permite Cambiar el nombre de la rama que se encuentra ubicado
--- git branch -d nombre_rama           : Eliminar Rama
--- git push origin :nombreRama        : Enviar al servidor remoto la eliminacion del branch  
--- git status                         : Permite ver el estado de del proyecto , que archivo esta afura y cuales esta adenro y a que rama pertenece
--- git rm                             : permite remover el archivo agregado Ej: git rm archivoVacio.txt
--- git rm --cached                    : Permite eliminar un archivo al momento de subir los cambios, elimina el arcivo no guardado , solo esta en memoria ram   Ej: git rm --cached archivo.txt
--- git rm --force                     : Permite eliminar un archivo Elimina los archivos de Git y del disco duro.   Ej: git rm --force archivo.txt
--- git config                         : Muestras todas las configuaraciones de git
--- git config --list                  : Muestras todas las configuaraciones por defecto de git y lo que le falta
--- git config -l                      : Muestras todas las configuaraciones por defecto de git y lo que le falta
--- git config --list --show-origin    : Muestras todas las configuaraciones y donde estan guardadas
--- git config --global user.name      : Permite cambiar el nombre de Usuario EJ : git config --global user.name "Nombre ejemplo"
--- git config --global user.email     : Permite cambiar el email del Usuario EJ : git config --global user.name "correo@ejmplo.com"
--- git log                            : Muestra toda la historia de un archivo Ej: git log archivo.txt
--- git log --stat                     : Muestra la historia de todos los archivos cambiados y cuanto se cambio
--- git log --all                      : Muestra toda la historia desde los inicios
--- git show                           : Muestra los cambios realizados sobre el archivo Ej: git show archivo.txt
--- git diff                           : Muestra la diferencia de un commit con otro commit del proyecto EJ: "git diff 23fdw453454r 4rf3ef34tg" // Primero se declara el viejo y segundo se declara el commit mas reciente
--- git reset                          : Permite retroceder al un commit anterior, indicando el commit a retroceder se puede retroceder de 2 formas:
                                         - git reset e312432ed23e3fdw2332d23f324 --soft       //Los cambios quedan para volver a guardar en el siguiente commit
                                         - git reset e312432ed23e3fdw2332d23f324 --hard      // se elimina todo hata la version indicada a volver

--- git clone                                          : Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
--- git push                                           : Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
--- git fetch                                          : Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
--- git merge                                          : También usamos el comando git fetch con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
--- git pull                                           : Básicamente, git fetch y git merge al mismo tiempo.
--- git remote add origin urlClonGH                    : se realiza el enlace del repositorio local a nuestro repositorio remoto indicando la ruta ej: git remote add origin https://github.com/jdxcfgg/Documentacion_gitHub.git
--- git remote -v                                      : deberia motrar los fetch que tenemos y los push enlazada al repositorio remoto al local
--- git remote set-url origin                          : se cambia la conexion de repositorio remoto de https a SSH indicando la url de forma SSH
--- git push origin master                             : se le envia la informacion de la rama (master) (repositorio local) , al repositorio remoto
--- git pull origin master                             : se trae todos los cambios y documentos del mundo remoto a nuestra rama del pc
--- git pull origin master --allow-unrelated-histories : permite realizar un merge con el mundo remoto , uniendo los commit y bajando toda los documentos del mundo remoto al pc
--- git log --all --graph --decorate --oneline         : Permite ver todos los commit realizados al repositorio de forma grafica 
--- git tag                                            : Mustra la lista de todos los tag
--- git tag -a v0.1 -m                                 : Permite crear Tag y asociar comentario y asociarlo a un commit Ej : git tag -a NombreTagCrear -m  "comentario" 1d548e
--- git tag -a dormido -m                              : Permite crear Tag y asociar comentario Ej : git tag -a nombreTag -m  "comentario" 1d548e
--- git show-ref --tags                                : muestra todos los tag y a que commit se encuentran asociados 
--- git push origin --tags                             : Permite enviar al repositorio remoto los tag del repositorio local
--- git tag -d                                         : Elimina el tag indicado de repositorio local Ej: git tag -d nombreTag
--- git push origin :refs/tags/nombreTags              : Permite eliminar el tag dormido en el repositorio remoto
--- git show-ref --tags                                : Muestra los tag y a que commit se encuentra asociado
--- git show-branch                                    : Muestra todos los branch que existen
--- git show-branch --all                              : Muestra todos los branch que existen, hasta los ocultos
--- gitk                                               : Muestra una interfaz grafica de la historia de los commit y branch 

--- git shortlog                                       : Muestra un log por persona
--- git shortlog -sn                                   : Muestra las personas que han hechi comit
--- git shortlog -sn --all                             : Muestra las personas que han hechi commit hasta los borrados
--- git shortlog -sn --all --no-merges                 : Muestra las personas que han hechi commit hasta los borrados pero no los merge reaizados
--- git config --global alias.stasts "Comando"         : Permite realizar un alias en la configuracion de un comando de git EJ : git config --global alias.stasts "git shortlog -sn --all --no-merges"
--- git blame index.htm                                : Muestra todo lo que le ha realizado al archivo y quien lo realizo  EJ : git blame index.htm
--- git blame --help                                   : Abre una pagina donde se indica de como se debe utilizar el comando 
--- git blame index.htm -L35,53                        : Muestra todo lo que le ha realizado al archivo y quien lo realizo desde la lineas indicadas "desde, hasta" EJ: git blame index.htm -L35,53
--- git branch -r                                      : Permite ver las ramas remotas
--- git branch -a                                      : Permite ver todas las ramas remotas hasta las que le falta el push 


--- git grep                                                  : Muestra donde esta la palabra indicada EJ: git grep Palabra
--- git grep -n                                               : Muestra donde esta la palabra y en que linea se encuentra la palabra indicada EJ: git grep -n Palabra
--- git grep -c                                               : Muestra la cantidad de veces que aparece la palabra indicada por archivo EJ: git grep -c Palabra
--- git grep "<p>"                                            : Muestra donde esta la palabra indicada de html EJ: git grep "<p>"
--- git grep -c "<p>"                                         : Muestra la cantidad de veces que aparece la palabra indicada en html por archivo EJ: git grep -c "<p>"
--- git log -S "cabecera"                                     : Busca entre los commit la palabra indicada EJ: git log -S Palabra
--- git reflog                                                : Trae el historia completo del repositorio en general 
    
--- git commit --amend                         : Permite guardar los cambios faltantes al commit anteriormente realizado 
--- git cherry-pick                            : me traer las versiones del comint indicado en el comando EJ: git cherry-pick 32ComitIndicado
--- git clean                                                   : Indica un error de que manera lo debes hacer
--- git clean --dry-run                                         : Simula lo que se va a borrar sin borrar
--- gi clean -f                                                 : Borrar los arhivos en el commit
--- git stash                                    : Nos vuelve al estado anterior del cambios, lo que se cambio queda en memoria temporal
--- git stash list                               : Muestra los  stash existente en memoria
--- git stash pop                                : Nos devuelve a los cambios guardados en memmoria.
--- git stash branch nombreRama                  : Crea rama a partir del stash en memoria temporal.
--- git stash drop                               : Nos permite eliminar el stash guardado

--- git rebase master                            : mescla los cambio de la rama que se encuentra ubicado con la rama que deseja EJ : git rebase master 








/**Errores de git hub y git***/

-*- git commit                         : si agregas un commit sin comentario saldra un error, el cual te obliga a agregar un comentario, una vez agregado
                                         el comentario se debe apretar la tecla "ESCAPE + SHIFT + ZZ" se ejecuta el commit y se guarda
                                         //Para poder escribir se debe apretar "escape + i"


/*Comando de configuracion*/

--- git config                         : Muestras todas las configuaraciones de git
--- git config --list                  : Muestras todas las configuaraciones por defecto de git y lo que le falta
--- git config --list --show-origin    : Muestras todas las configuaraciones y donde estan guardadas
--- git config --global user.name      : Permite cambiar el nombre de Usuario EJ : git config --global user.name "Nombre ejemplo"
--- git config --global user.email     : Permite cambiar el email del Usuario EJ : git config --global user.name "correo@ejmplo.com"
--- git log                            : Muestra toda la historia de un archivo Ej: git log archivo.tx
--- git diff                           : Muestra la diferencia de un commit con otro commit del proyecto EJ: "git diff 23fdw453454r 4rf3ef34tg" // Primero se declara el viejo y segundo se declara el commit mas reciente
--- git push origin master             : se le envia la informacion de la rama (master) (repositorio local) , al repositorio remoto
--- git pull origin master             : se trae todos los cambios y documentos del mundo remoto a nuestra rama del pc
--- git pull origin master --allow-unrelated-histories :permite realizar un merge con el mundo remoto , uniendo los commit y bajando toda los documentos del mundo remoto al pc
--- git remote set-url origin          : se cambia la conexion de repositorio remoto de https a SSH indicando la url de forma SSH

--- git tag                                            : Mustra la lista de todos los tag
--- git tag -a v0.1 -m                                 : Permite crear Tag y asociar comentario y asociarlo a un commit Ej : git tag -a NombreTagCrear -m  "comentario" 1d548e
--- git push origin --tags                             : Permite enviar al repositorio remoto los tag del repositorio local
--- git tag -d                                         : Elimina el tag indicado de repositorio local Ej: git tag -d nombreTag
--- git push origin :refs/tags/nombreTags              : Permite eliminar el tag dormido en el repositorio remoto












/*Comando de Trabajo*/
--- git init                           : Inicia el repositorio en la carpeta ubicada
-*- git add                            : permite agregar archivos al repositorio ej: git add .archivoVacio.txt
-*- git add .                          : permite agregar archivos todos los archivos del repositorio
--- commit -m ""                       : permite enviar el archivo al repositorio donde estan todos los cambios realizados al repositorio real.
--- git reset                          : Permite histpryretroceder al un commit anterior, indicando el commit a retroceder se puede retroceder de 2 formas:
                                         - git reset e312432ed23e3fdw2332d23f324 --soft       //Los cambios quedan para volver a guardar en el siguiente commit
                                         - git reset e312432ed23e3fdw2332d23f324 --hard      // se elimina todo hata la version indicada a volver
--- git remote add origin urlClonGH    : se realiza el enlace del repositorio local a nuestro repositorio remoto indicando la ruta ej: git remote add origin urlClonGH 
--- git push origin master             : se le envia la informacion de la rama (master) (repositorio local) , al repositorio remoto
--- git pull origin master             : se trae todos los cambios y documentos del mundo remoto a nuestra rama del pc
--- git pull origin master --allow-unrelated-histories :permite realizar un merge con el mundo remoto , uniendo los commit y bajando toda los documentos del mundo remoto al pc

--- git tag                                            : Mustra la lista de todos los tag
--- git tag -a v0.1 -m                                 : Permite crear Tag y asociar comentario y asociarlo a un commit Ej : git tag -a NombreTagCrear -m  "comentario" 1d548e
--- git show-ref --tags                                : muestra todos los tag y a que commit se encuentran asociados 
--- git push origin --tags                             : Permite enviar al repositorio remoto los tag del repositorio local
--- git tag -d                                         : Elimina el tag indicado de repositorio local Ej: git tag -d nombreTag
--- git push origin :refs/tags/nombreTags              : Permite eliminar el tag dormido en el repositorio remoto











/*Comando de Trabajo y administracion*/
--- git checkout                       : Trae todos los cambios desde el repositorio trae los cambios de la rama indicada :
--- git branch                         : Permite crear una nueva rama en la cual se puede trabajar una nueva version EJ: git branch cabecera  // git branch : pos si solo muertra todos los branch
--- git clone                          : Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
--- git push                           : Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
--- git fetch                          : Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
--- git merge                          : También usamos el comando git fetch con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
--- git pull                           : Básicamente, git fetch y git merge al mismo tiempo.
--- git remote add origin urlClonGH    : se realiza el enlace del repositorio local a nuestro repositorio remoto indicando la ruta ej: git remote add origin urlClonGH 
--- git remote -v                      : deberia motrar los fetch que tenemos y los push enlazada al repositorio remoto al local
--- git remote set-url origin          : se cambia la conexion de repositorio remoto de https a SSH indicando la url de forma SSH
--- git push origin master             : se le envia la informacion de la rama (master) (repositorio local) , al repositorio remoto
--- git pull origin master             : se trae todos los cambios y documentos del mundo remoto a nuestra rama del pc
--- git pull origin master --allow-unrelated-histories :permite realizar un merge con el mundo remoto , uniendo los commit y bajando toda los documentos del mundo remoto al pc

--- git tag                                            : Mustra la lista de todos los tag
--- git tag -a v0.1 -m                                 : Permite crear Tag y asociar comentario y asociarlo a un commit Ej : git tag -a NombreTagCrear -m  "comentario" 1d548e
--- git show-ref --tags                                : muestra todos los tag y a que commit se encuentran asociados 
--- git push origin --tags                             : Permite enviar al repositorio remoto los tag del repositorio local
--- git tag -d                                         : Elimina el tag indicado de repositorio local Ej: git tag -d nombreTag
--- git push origin :refs/tags/nombreTags              : Permite eliminar el tag dormido en el repositorio remoto
--- git show-ref --tags                : Muestra los tag y a que commit se encuentra asociado
--- git show-branch                    : Muestra todos los branch que existen
--- git show-branch --all              : Muestra todos los branch que existen, hasta los ocultos
--- gitk                               : Muestra una interfaz grafica de la historia de los commit y branch 
-*- git branch -m nombreBranchCambiar              : Permite Cambiar el nombre de la rama que se encuentra ubicado
--- git branch -d nombre_rama                       : Eliminar Rama
--- git push origin :nombreRama                    : Enviar al servidor remoto la eliminacion del branch  










/*Comandos de Auditoria*/
--- git diff                           : Muestra la diferencia de un commit con otro commit del proyecto EJ: "git diff 23fdw453454r 4rf3ef34tg" // Primero se declara el viejo y segundo se declara el commit mas reciente
--- git log                            : Muestra toda la historia de un archivo Ej: git log archivo.tx
--- git show                           : Muestra los cambios realizados sobre el archivo Ej: git show archivo.txt
--- git log --stat                     : Muestra la historia de todos los archivos cambiados y cuanto se cambio
--- git log --all                      : Muestra toda la historia desde los inicios
--- git reset                          : Permite retroceder al un commit anterior, indicando el commit a retroceder se puede retroceder de 2 formas:
                                         - git reset e312432ed23e3fdw2332d23f324 --soft       //Los cambios quedan para volver a guardar en el siguiente commit
                                         - git reset e312432ed23e3fdw2332d23f324 --hard      // se elimina todo hata la version indicada a volver
--- git remote -v                      : deberia motrar los fetch que tenemos y los push enlazada al repositorio remoto al local
--- git remote set-url origin          : se cambia la conexion de repositorio remoto de https a SSH indicando la url de forma SSH
--- git log --all --graph --decorate --oneline : Permite ver todos los commit realizados al repositorio de forma grafica 

--- git show-ref --tags                : Muestra los tag y a que commit se encuentra asociado
--- git show-branch                    : Muestra todos los branch que existen
--- git show-branch --all              : Muestra todos los branch que existen, hasta los ocultos
--- gitk                               : Muestra una interfaz grafica de la historia de los commit y branch 
-*- git branch -m nombreBranchCambiar              : Permite Cambiar el nombre de la rama que se encuentra ubicado
--- git branch -d nombre_rama                       : Eliminar Rama
--- git push origin :nombreRama                    : Enviar al servidor remoto la eliminacion del branch  
--- git shortlog                                               : Muestra un log por persona
--- git shortlog -sn                                           : Muestra las personas que han hechi comit
--- git shortlog -sn --all                                     : Muestra las personas que han hechi commit hasta los borrados
--- git shortlog -sn --all --no-merges                         : Muestra las personas que han hechi commit hasta los borrados pero no los merge reaizados
--- git config --global alias.stasts "Comando"                 : Permite realizar un alias en la configuracion de un comando de git EJ : git config --global alias.stasts "git shortlog -sn --all --no-merges"
--- git blame index.htm                                        : Muestra todo lo que le ha realizado al archivo y quien lo realizo  EJ : git blame index.htm
--- git blame --help                                           : Abre una pagina donde se indica de como se debe utilizar el comando 
--- git blame index.htm -L35,53                                : Muestra todo lo que le ha realizado al archivo y quien lo realizo desde la lineas indicadas "desde, hasta" EJ: git blame index.htm -L35,53
--- git branch -r                                              : Permite ver las ramas remotas
--- git branch -a                                              : Permite ver todas las ramas remotas hasta las que le falta el push 


--- git grep                                                  : Muestra donde esta la palabra indicada EJ: git grep Palabra
--- git grep -n                                               : Muestra donde esta la palabra y en que linea se encuentra la palabra indicada EJ: git grep -n Palabra
--- git grep -c                                               : Muestra la cantidad de veces que aparece la palabra indicada por archivo EJ: git grep -c Palabra
--- git grep "<p>"                                            : Muestra donde esta la palabra indicada de html EJ: git grep "<p>"
--- git grep -c "<p>"                                         : Muestra la cantidad de veces que aparece la palabra indicada en html por archivo EJ: git grep -c "<p>"
--- git log -S "cabecera"                                     : Busca entre los commit la palabra indicada EJ: git log -S Palabra
--- git reflog                                    : Trae el historia completo del repositorio en general 
--- git commit --amend                  : Permite guardar los cambios faltantes al commit anteriormente realizado 
/*1*/ - git clean                                                   : Indica un error de que manera lo debes hacer
/*2*/ - git clean --dry-run                                         : Simula lo que se va a borrar sin borrar
/*3*/ - gi clean -f                                                 : Borrar los arhivos en el commit




/*Comandos de eliminacion*/
--- git rm                             : permite remover el archivo agregado Ej: git rm archivoVacio.txt
--- git rm --cached                    : Permite eliminar un archivo al momento de subir los cambios, elimina el arcivo no guardado , solo esta en memoria ram   Ej: git rm --cached archivo.txt
--- git rm --force                     : Permite eliminar un archivo Elimina los archivos de Git y del disco duro.   Ej: git rm --force archivo.txt
--- git reset                          : Permite retroceder al un commit anterior, indicando el commit a retroceder se puede retroceder de 2 formas:
                                         - git reset e312432ed23e3fdw2332d23f324 --soft       //Los cambios quedan para volver a guardar en el siguiente commit
                                         - git reset e312432ed23e3fdw2332d23f324 --hard      // se elimina todo hata la version indicada a volver

--- git tag                                            : Mustra la lista de todos los tag
--- git show-ref --tags                                : muestra todos los tag y a que commit se encuentran asociados 
--- git tag -d                                         : Elimina el tag indicado de repositorio local Ej: git tag -d nombreTag
--- git push origin :refs/tags/nombreTags              : Permite eliminar el tag dormido en el repositorio remoto
-*- git branch -m nombreBranchCambiar              : Permite Cambiar el nombre de la rama que se encuentra ubicado
--- git branch -d nombre_rama                       : Eliminar Rama
--- git push origin :nombreRama                    : Enviar al servidor remoto la eliminacion del branch  

--- git cherry-pick                            : me traer las versiones del comint indicado en el comando EJ: git cherry-pick 32ComitIndicado
--- git stash                                    : Nos vuelve al estado anterior del cambios, lo que se cambio queda en memoria temporal
--- git stash list                               : Muestra los  stash existente en memoria
--- git stash pop                                : Nos devuelve a los cambios guardados en memmoria.
--- git stash branch nombreRama                  : Crea rama a partir del stash en memoria temporal.
--- git stash drop                               : Nos permite eliminar el stash guardado

--- git rebase master                            : mescla los cambio de la rama que se encuentra ubicado con la rama que deseja EJ : git rebase master 







/*Comandos de creacion*/
--- git init                           : Inicia el repositorio en la carpeta ubicada
-*- git add                            : permite agregar archivos al repositorio ej: git add .archivoVacio.txt
-*- git add .                          : permite agregar archivos todos los archivos del repositorio
--- git checkout                       : Trae todos los cambios desde el repositorio trae los cambios de la rama indicada :
--- git branch                         : Permite crear una nueva rama en la cual se puede trabajar una nueva version EJ: git branch cabecera
--- commit -m ""                       : permite enviar el archivo al repositorio donde estan todos los cambios realizados al repositorio real.
-*- commit -am ""                      : permite enviar el archivo al repositorio donde estan todos los cambios realizados al repositorio real con comentatio,
                                         Tambien se ahorra el git add .  con los archivos ya iniciados // los archivos nuevos se le debe hacer git add .
--- git remote add origin urlClonGH    : se realiza el enlace del repositorio local a nuestro repositorio remoto indicando la ruta ej: git remote add origin urlClonGH 
--- git push origin master             : se le envia la informacion de la rama (master) (repositorio local) , al repositorio remoto
--- git pull origin master             : se trae todos los cambios y documentos del mundo remoto a nuestra rama del pc
--- git pull origin master --allow-unrelated-histories :permite realizar un merge con el mundo remoto , uniendo los commit y bajando toda los documentos del mundo remoto al pc


--- git tag                                            : Mustra la lista de todos los tag
--- git tag -a v0.1 -m                                 : Permite crear Tag y asociar comentario y asociarlo a un commit Ej : git tag -a NombreTagCrear -m  "comentario" 1d548e
--- git push origin --tags                             : Permite enviar al repositorio remoto los tag del repositorio local








/**Errores de git hub y git***/
-*- git commit                         : si agregas un commit sin comentario saldra un error, el cual te obliga a agregar un comentario, una vez agregado
                                         el comentario se debe apretar la tecla "ESCAPE + SHIFT + ZZ" se ejecuta el commit y se guarda



(master/MERGING)                       : Cuando no se completa un merge, puede ocurrir al encontrar un conflicto
 






/**********************************************FLUJO DE TRABAJO**********************************/

/**********************************************FLUJO DE TRABAJO**********************************/

/**********************************************FLUJO DE TRABAJO**********************************/

/**********************************************FLUJO DE TRABAJO**********************************/

/**********************************************FLUJO DE TRABAJO**********************************/



/***CREACION DE RAMA Y UBICARSE EN ELLA ***/

-1-SABER ESTADO ACTUAL
  *git status

-2-CREAR RAMA
  *git branch nuevaRamaCabecera

-3-UBICARNOS EN LA NUEVA RAMA
  *git  checkout nuevaRamaCabecera



/***GUARDAR CAMBIOS SI SON NUEVOS ***/

-1-SABER ESTADO ACTUAL DE LOS CAMBIOS
  *git status

-2-GUARDAR TODO LOS ARCHIVOS EN ESTADO UNTRACKED PARA PASARLOS A TRACKED Y QUEDEN EN STAGING
  *git add .

-3-GUARDAMOS LOS CAMBIOS EN LA RAMA UBICADA CON COMENTARIO 
  *git commit -m "Comentario"

-4-SABER ESTADO ACTUAL DE LOS CAMBIOS
  *git status





/***GUARDAR CAMBIOS SI NO SON NUEVOS ***/

-1-SABER ESTADO ACTUAL DE LOS CAMBIOS
  *git status

-2-GUARDAMOS LOS CAMBIOS EN LA RAMA UBICADA CON COMENTARIO Y SIN HACER EL "git add ." YA QUE CUMPLE ESA FUNCION
  *git commit -am "Comentario"

-3-SABER ESTADO ACTUAL DE LOS CAMBIOS
  *git status





/***HACER MERGE GIT MERGE ***/
//PARA HACER MERGE DEBEN TENER TODOS LOS ARCHIVOS EN STAGING EN EL REPOSITORIO GUARDADO

-1-UBICARCE EN LA RAMA PRINCIPAL (RAMA DE PRODUCCION)
  *git checkout master


-2-DESDE LA RAMA PRINCIPAL HACER MERGE A LA RAMA DE TRABAJO A UNIR
  *git merge cabecera "cabecera"





/***HACER MERGE GIT MERGE CON CONFLICTO EN LOS COMANDOS ***/
//PARA HACER MERGE DEBEN TENER TODOS LOS ARCHIVOS EN STAGING EN EL REPOSITORIO GUARDADO

-1-UBICARCE EN LA RAMA PRINCIPAL (RAMA DE PRDUCCION)
  *git checkout master


-2-DESDE LA RAMA PRINCIPAL HACER MERGE A LA RAMA DE TRABAJO A UNIR
  *git merge cabecera "cabecera" 
  /MENSAJE DE CONFLICTO DE INFORMACION , MOSTRANDO EN QUE DOCUMENTO FUERON

-3-REVISUAL VISUAL CODE O VISUAL ESTUDIO PARA VER DONDE INDICARON LOS CONFLICTOS 
  /REVISAR LAS INCIDENCIAS Y SOLUCIONAR Y DECIDIR CON CUAL QUEDAR 

-4-Guardar nuevamente la informacion













/**********************************************COMO SUBIR  TU REPOSITORIO DE GIT INICIAL A GITHUB**********************************/
/**********************************************COMO SUBIR  TU REPOSITORIO DE GIT INICIAL A GITHUB**********************************/
/**********************************************COMO SUBIR  TU REPOSITORIO DE GIT INICIAL A GITHUB**********************************/
/**********************************************COMO SUBIR  TU REPOSITORIO DE GIT INICIAL A GITHUB**********************************/

/*1*/ - Primero que todo ya debes tener a este punto un repositorio realizado en git con el cual ya cuente con un commit y registro
/*2*/ - Despues te diriges a la pagina de "GitHub" y le das a la opcion de "Crear a new Repository"
/*3*/ - Una ves realizado el paso anterio completas la informacion que solicita y le haces click a "Crear Repositorio"
/*4*/ - Una vez creado el repositorio , se clona el repositorio de forma https con la consola
/*5*/ - le decimos a git que le agregaremos un origen remoto de los archivos, en consola se ubica en el repositorio creado con git 


/*6*/ - se agrega el comando:
        * git remote add origin urlClonadaDeGitHun   // indicamos que en el remositorio que estamos (master) , es el original al que creamos en github remotamente
        * enter                                     // se realiza el enlaze del repositorio remoto al de nuestro pc

/*7*/ - se agrega comando :
        *git remote  //deberia motrar origin , indicando que se encuentra enlazada remotamente

/*8*/ - se agrega comando :
        *git remote -v  //deberia motrar los fetch que tenemos y los push enlazada al repositorio remoto


/*9*/ - se agrega comando :
        *git push origin master  // se le envia la informacion de la rama (master) al repositorio remoto 

/*10*/-  Se genera un error cuando se intenta enviar los archivos al repositorio remoto y el repositorio remoto ya cuenta con archivos que no estan en el del pc,

/*11*/- se agrega comando:
        *git pull origin master   // se trae todos los cambios del mundo remoto a nuestra rama del pc

/*12*/- se agrega comando:
        *git pull origin master --allow-unrelated-histories   // permite realizar un merge con el mundo remoto , uniendo los commit y bajando toda los documentos del mundo remoto al pc


/*13*/ - se agrega comando :
        *git push origin master  // se le envia la informacion de la rama (master) al repositorio remoto 

/*14*/ - se agrega comando :
        *git status // para ver estado 



/*15*/ - Revisar en github los cambios 





/**********************************************CONFIGURACION DE LAS LLAVES SSH EN LOCAL**********************************/

/**********************************************CONFIGURACION DE LAS LLAVES SSH EN LOCAL**********************************/

/**********************************************CONFIGURACION DE LAS LLAVES SSH EN LOCAL**********************************/

/**********************************************CONFIGURACION DE LAS LLAVES SSH EN LOCAL**********************************/
 
//SE DEBE TENER CADA LLAVE POR CADA COMPUTADOR PERSONA QUE SE UTILIZE


/*0*/ - Comando :// se verifica que se encuentre corriendo ssh
        *eval $(ssh-agent -s)

/*1*/ - Comando ://se agrega comando que permite la creacion de la clave conectada al correo electronico
        *ssh-keygen -t rsa -b 4096 -C "correo_asociado@gitYgithub.com"

/*2*/ - //Muestra mensaje indicando donde debe guardar la llave, lo recomendable es guardarla en home

/*3*/ - //Muestra mensaje indicando que ingreser una clave con espacios , es una clave mas que se agrega //puedes apretar ENTER y omitir poner clave
       * //Muestra mensaje indicando que ingreses name , //puedes apretar ENTER y omitir poner name

/*4*/ - //Muestra mensaje indicando donde se guardo la clave y muestra huella y mensajes indicado que la llave es de verdad, tambien muestra ramdon

/*5*/ - //verificar que se crearon las llasves donde se indico


/*6*/ - Comando :// se verifica que se encuentre corriendo ssh , indicando en el procedor 
        *eval $(ssh-agent -s)

/*7*/ - Comando ://se agrega llave publica indicando la ruta en donde se indico que se creara la llave (~/.ssh/id_rsa)( #ruta)
        *ssh-add ~/.ssh/id_rsa



/**********************************************CONFIGURACION DE LAS LLAVES SSH / CONECION A GITHJUB CON SSH **********************************/
/**********************************************CONFIGURACION DE LAS LLAVES SSH / CONECION A GITHJUB CON SSH **********************************/
/**********************************************CONFIGURACION DE LAS LLAVES SSH / CONECION A GITHJUB CON SSH **********************************/

/*0*/ - Comando ://se agrega comando que permite la creacion de la clave conectada al correo electronico
        *ssh-keygen -t rsa -b 4096 -C "correo_asociado@gitYgithub.com"

/*1*/ - abrir llave ssh creada en tu computador y copiar, una vez copiada ir a github
/*2*/ - abrir GitHub y abrir la opcion en la izquina donde esta mi avatar la opcion de "SETTINGS" O "CONFIGURACION"
/*3*/ - mostrara una serie de obciones, uno se dirige a la opcion de "SSH and GPG keys" , nos permitira realizar hacer el enlaze de llaves publicas
/*4*/ - abrira un modulo donde se mostrara las llaves asociadas a github o la opcion de asociar una nueva llave
/*5*/ - abrira un modulo donde creara la nueva asociacion, donde se ingresa una descripcion de la llave y la llave publica.
/*6*/ - verificar la asociacion 
/**/ 
/*7*/ - ir a nuestro repositorio y hacer click a la opcion clonar o descargar
/*8*/ - se selecciona la opcion de usar SSH
/*9*/ - se dirige a la consola a la carpeta del repositorio local

/*10*/- Comando: //para ver url que esta asociado el repositorio y cambiar
        *git remote -v 

/*11*/- Comando: //se cambia la url del fetch y push origin por el formato SSH
        *git remote set-url origin  git@github.com:jmardones96/Anotaciones-Git-GitHub.git

/*12*/- Comando: //para ver url que esta asociado el repositorio y cambiar
        *git remote -v  //verificar que cambio 










/********************************************** CREACION DE TAG PARA LOS COMMIT **********************************/
/********************************************** CREACION DE TAG PARA LOS COMMIT **********************************/
/********************************************** CREACION DE TAG PARA LOS COMMIT **********************************/

/*1*/ - Comando:
       *git tag -a v0.1 -m "mensaje anotacion" hasht
        Ej : git tag -a NombreTagCrear -m "Resultado de las Primeras clases del curso" a15dsvffr

/*2*/ - Comando://actualizamos la version del repositorio remoto
       * git pull origin master

/*3*/ - Comando: //Enviamos los tag creados en nuestro repositorio local al repositorio remoto
       *git push origin --tag








/********************************************** ELIMINACION DE TAG PARA LOS COMMIT **********************************/
/********************************************** ELIMINACION DE TAG PARA LOS COMMIT **********************************/
/********************************************** ELIMINACION DE TAG PARA LOS COMMIT **********************************/

/*1*/ - Comando://visualizamos los tag creados
        * show-ref --tags 
   
/*2*/ - Comando: //eliminamos el tag del repositorio local
       * git tag -d NombreTagEliminar 

/*3*/ - Comando : //nos traemos todas las modificaciones
       * git pull origin master

/*4*/ - Comando://subimos todos los cambios de los tags al repositorio local i
       *git push origin --tags

/*5*/ - Comando://Realizamos efectiva la eliminacion de tag creado
       *git push origin :refs/tags/nombreTagEliminar









/********************************************** CREACION DE ALIAS PARA COMANDOS **********************************/
/********************************************** CREACION DE ALIAS PARA COMANDOS **********************************/
/********************************************** CREACION DE ALIAS PARA COMANDOS **********************************/

/*1*/ - Ejecutar comando que le desea hacer un alias

/*2*/ - Comando://Crea alias para realizar la referencia la comando establecido
      * alias NombreAlias="Comando"  EJ: alias graficoRamas="git log --all --graph --decorate --oneline"

/*3*/ - Comando: //Ejecutar alias para verificar que se realizo la realacion de referencia
       * NombreAlias








/********************************************** SUBIR NUEVA RAMA CREADA AL REPOSITORIO REMOTO **********************************/
/********************************************** SUBIR NUEVA RAMA CREADA AL REPOSITORIO REMOTO **********************************/
/********************************************** SUBIR NUEVA RAMA CREADA AL REPOSITORIO REMOTO **********************************/

/*1*/ - // nos ubicamos en la rama maestra para que la nueva rama se encuentre con la actualizacion mas reciente
       // en el momento que generes un nuevo brach sera igual al branch que te encuentras ubicado

/*2*/ - Comando: //Se crea el branch con su nombre correspondiente
       * git branch nuevoBranch

/*3*/ - Comando: // se verifica la creacion del brach
       * git branch

/*4*/ - Comando:// se envia el branch creado al repositorio remoto
       * git push origin nombreBranchCreado

/*5* - Vefigicar ne gitHub







/**********************************************COMO SUBIR  TU REPOSITORIO DE GIT A GITHUB**********************************/
/**********************************************COMO SUBIR  TU REPOSITORIO DE GIT A GITHUB**********************************/
/**********************************************COMO SUBIR  TU REPOSITORIO DE GIT A GITHUB**********************************/

/*1*/ - //Te ubicas en la rama que quieres subir los cambios


/*2*/ - Comando : //Comando que permite el Add y el commit a la vez para guardar los cambios 
       * git commit -am "Comentario"

/*3*/ - Comando : //Envia los cambios de tu branch al repositorio remoto
       * git push origin nombreBranch







/**********************************************ELIMINAR BRANCH EN REPOSITORIO REMOTO Y LOCAL **********************************/
/**********************************************ELIMINAR BRANCH EN REPOSITORIO REMOTO Y LOCAL **********************************/
/**********************************************ELIMINAR BRANCH EN REPOSITORIO REMOTO Y LOCAL **********************************/

/*1*/ - Comando :// se indica el nombre de la rama a eliminar
       * git branch -d nombre_rama_eliminar

*2*/ - Comando : //se le envia actualizacion al servidor remoto 
       * git push origin :nombre_rama_eliminar









/**********************************************CAMBIAR DE NOMBRE DE BRANCH**********************************/
/**********************************************CAMBIAR DE NOMBRE DE BRANCH**********************************/
/**********************************************CAMBIAR DE NOMBRE DE BRANCH**********************************/


/*1*/ -//Ubicarse en la rama se de desea cambiar el nombre

/*2*/ - Comando ://Cambiar al nombre que se desea
       * git branch -m nuevoNombre
     




/**********************************************agregar un nuevo colaborador al proyecto**********************************/
/**********************************************agregar un nuevo colaborador al proyecto**********************************/
/**********************************************agregar un nuevo colaborador al proyecto**********************************/


/*1*/ -// ir al repositorio de git
/*2*/ -//ir a configuracion //setting
/*3*/ -//ir a administrar acceso 
/*4*/ -//enviar invitacion al correo del colaborador o su name de git
/*5*/ -// ya el colaborador puede descargar y subir sus versiones realizando pull y úsh












/**********************************************Git Ignore**********************************/
/**********************************************Git Ignore**********************************/
/**********************************************Git Ignore**********************************/

** Es una lista de archivos de los archivos que se van a ignorar

/*1*/ - Creo un nuevo archivo llamador ".gitignore"
/*2*/ - Se agrega las exteciones que se rechazara
/*3*/ - se guardar y ese archivo rechazara esas extensiones al momento de subir al repo









/**********************************************Readme.md**********************************/
/**********************************************Readme.md**********************************/
/**********************************************Readme.md**********************************/

* El archivo se debe crear con la extencion de "md" y el nombre de "Readme"
* Es un archivo con diseño html 
* El archivo "Readme.md" se mostrara en el inicio del repositorio de nuestro proyecto








/*****************************************Tu sitio web público con GitHub Pages**************************************/
/*****************************************Tu sitio web público con GitHub Pages**************************************/
/*****************************************Tu sitio web público con GitHub Pages**************************************/


** Se accede al sitio "https://pages.github.com/" Para ver documentacion

/*1*/ - Crear repositorio con el nombre de usuario.github.io EJ: "jmardones96.github.io" (Repositorio Publico)
/*2*/ - Subir Proyecto al repositorio con pagina "index.htm" (Obligatorio)
/*3*/ - Ir a configuracion y bajar hasta el final donde se indica "Páginas de GitHub"
/*4*/ - Se debe indicar que tomara la rama maestra 






/*****************************************Git Rebase: Reorganizando el trabajo realizado**************************************/
/*****************************************Git Rebase: Reorganizando el trabajo realizado**************************************/
/*****************************************Git Rebase: Reorganizando el trabajo realizado**************************************/

*** Se pega una rama paralela a la rama master  reiscribiendo el repo

/*1*/ - De la rama ue se va a unir , debe tener todos los camios guardados
/*2*/ - Se le realiza git rebase EJ : git rebase master




/**/ - git rebase master                            : mescla los cambio de la rama que se encuentra ubicado con la rama que deseja EJ : git rebase master 




/*****************************************Git Stash: Guardar cambios en memoria y recuperarlos después****************************************/
/*****************************************Git Stash: Guardar cambios en memoria y recuperarlos después****************************************/
/*****************************************Git Stash: Guardar cambios en memoria y recuperarlos después****************************************/

* Stash nos permite guardar un cambio en memoria temporal
* Nos permite devolver el cambio o avanzar
* 


--- git stash                                    : Nos vuelve al estado anterior del cambios, lo que se cambio queda en memoria temporal
--- git stash list                               : Muestra los  stash existente en memoria
--- git stash pop                                : Nos devuelve a los cambios guardados en memmoria.
--- git stash branch nombreRama                  : Crea rama a partir del stash en memoria temporal.
--- git stash drop                               : Nos permite eliminar el stash guardado

--- git rebase master                            : mescla los cambio de la rama que se encuentra ubicado con la rama que deseja EJ : git rebase master 









/*****************************************Git Clean: Limpiar tu proyecto de archivos no deseados****************************************/
/*****************************************Git Clean: Limpiar tu proyecto de archivos no deseados****************************************/
/*****************************************Git Clean: Limpiar tu proyecto de archivos no deseados****************************************/

** Nos sirve para eliminar archivos que estan para el push y antes del git add 
** Para saber qué archivos vamos a borrar tecleamos git clean --dry-run
** Para borrar todos los archivos listados (que no son carpetas) tecleamos git clean -f
 
** Los archivos indicados en gitignore no se eliminan
** Las carpetas se deben borrar a mano



/*1*/ - git clean                                                   : Indica un error de que manera lo debes hacer
/*2*/ - git clean --dry-run                                         : Simula lo que se va a borrar sin borrar
/*3*/ - gi clean -f                                                 : Borrar los arhivos en el commit









/*****************************************Git cherry-pick: Traer commits viejos al head de un branch****************************************/
/*****************************************Git cherry-pick: Traer commits viejos al head de un branch****************************************/
/*****************************************Git cherry-pick: Traer commits viejos al head de un branch****************************************/

** Se realiza desde el Master

--- git cherry-pick                            : me traer las versiones del comint indicado en el comando EJ: git cherry-pick 32ComitIndicado
 












/*****************************************Reconstruir commits en Git con amend****************************************/
/*****************************************Reconstruir commits en Git con amend****************************************/
/*****************************************Reconstruir commits en Git con amend****************************************/

*** Se utiliza cuando se olvido subir un cambio al commit anterior
*** los cambios realizados se suman al commit anteriormente realizado
*** amend significa Remendar


/*1*/ - Se guardar los cambios  
/*2*/ - SE realiza el commit -am para guardar la informacion
/*3*/ - Comando:
       * git commit --amend

--- git commit --amend                  : Permite guardar los cambios faltantes al commit anteriormente realizado 












/*****************************************Git Reset y Reflog: Úsese en caso de emergencia****************************************/
/*****************************************Git Reset y Reflog: Úsese en caso de emergencia****************************************/
/*****************************************Git Reset y Reflog: Úsese en caso de emergencia****************************************/


/*1*/ - Comando: // Para saber toda la historia del repositorio en general
       * git reflog 

/*2*/ - Comando:// Se resetea al hash indicado 
       * git reset HEAD@{2}

/*3*/ - Visualizar los status  para ver que archivo recuperar


/*****************************************Git Reset y Reflog: Úsese en caso de emergencia****************************************/

/*1*/ - Comando: // Para saber toda la historia del repositorio en general
       * git reflog 

/*2*/ - Comando:// Se resetea al hash indicado 
       * git reset --hard HEAD@{2}

/**/ - Visualizar los status  para ver que ese es el actual sin cambios 


--- git reflog                                    : Trae el historia completo del repositorio en general 












/*****************************************Buscar en archivos y commits de Git con Grep y log****************************************/
/*****************************************Buscar en archivos y commits de Git con Grep y log****************************************/
/*****************************************Buscar en archivos y commits de Git con Grep y log****************************************/


--- git grep                                                  : Muestra donde esta la palabra indicada EJ: git grep Palabra
--- git grep -n                                               : Muestra donde esta la palabra y en que linea se encuentra la palabra indicada EJ: git grep -n Palabra
--- git grep -c                                               : Muestra la cantidad de veces que aparece la palabra indicada por archivo EJ: git grep -c Palabra
--- git grep "<p>"                                            : Muestra donde esta la palabra indicada de html EJ: git grep "<p>"
--- git grep -c "<p>"                                         : Muestra la cantidad de veces que aparece la palabra indicada en html por archivo EJ: git grep -c "<p>"
--- git log -S "cabecera"                                     : Busca entre los commit la palabra indicada EJ: git log -S Palabra










/*****************************************Comandos y recursos colaborativos en Git y Github****************************************/
/*****************************************Comandos y recursos colaborativos en Git y Github****************************************/
/*****************************************Comandos y recursos colaborativos en Git y Github****************************************/


--- git shortlog                                               : Muestra un log por persona
--- git shortlog -sn                                           : Muestra las personas que han hechi comit
--- git shortlog -sn --all                                     : Muestra las personas que han hechi commit hasta los borrados
--- git shortlog -sn --all --no-merges                         : Muestra las personas que han hechi commit hasta los borrados pero no los merge reaizados
--- git config --global alias.stasts "Comando"                 : Permite realizar un alias en la configuracion de un comando de git EJ : git config --global alias.stasts "git shortlog -sn --all --no-merges"
--- git blame index.htm                                        : Muestra todo lo que le ha realizado al archivo y quien lo realizo  EJ : git blame index.htm
--- git blame --help                                           : Abre una pagina donde se indica de como se debe utilizar el comando 
--- git blame index.htm -L35,53                                : Muestra todo lo que le ha realizado al archivo y quien lo realizo desde la lineas indicadas "desde, hasta" EJ: git blame index.htm -L35,53
--- git branch -r                                              : Permite ver las ramas remotas
--- git branch -a                                              : Permite ver todas las ramas remotas hasta las que le falta el push 








 
git
--- git show-ref --tags                            : Muestra los tag y a que commit se encuentra asociado
--- git show-branch                                : Muestra todos los branch que existen
--- git show-branch --all                          : Muestra todos los branch que existen, hasta los ocultos
--- gitk                                           : Muestra una interfaz grafica de la historia de los commit y branch 



-*- git branch -m nombreBranchCambiar              : Permite Cambiar el nombre de la rama que se encuentra ubicado
--- git branch -d nombre_rama                       : Eliminar Rama
--- git push origin :nombreRama                    : Enviar al servidor remoto la eliminacion del branch  







--- git clone pergarUrl
--- git commit -am "comentario"
--- git pull origin master
--- git banch
--- git log
--- git log --graph
--- git push origin master
---//Mensaje de Permiso en el caso que no lo cuente en el repositorio









-- Qué es un SHA-1


-- Con el comando ls en la terminal podemos:
-- ¿Qué nos permite hacer git checkout -b?
-- Qué herramienta podemos hacer para tener un mayor control de nuestros proyecto en GitHub?












